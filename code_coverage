#!/usr/bin/python3
#+
# Example use of python_freetype: report on which code blocks
# are covered by a given font. Invoke this script as follows:
#
#     code_coverage <fontspec>
#
# where <fontspec> is the Fontconfig pattern string identifying the
# font to use; for the purposes of this script, typically a family
# name will be sufficient. The output will consist of one line for
# each Unicode code block for which the fontâ€™s default character
# map defines at least one character, showing how many characters
# are defined in that block and the size of the block.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import freetype2 as freetype
from code_blocks import \
    code_blocks

max_block_name_len = max(len(block.name) for block in code_blocks)

#+
# Keeping track of code runs
#-

class CodeRuns :
    "collecting contiguous runs of character/glyph codes."

    def __init__(self, initial_run = None) :
        if initial_run != None :
            self._runs = [(initial_run[0], initial_run[1])]
        else :
            self._runs = []
        #end if
    #end __init__

    def add(self, code) :
        "includes the specified code, if not already there."
        prepend = False
        append = False
        duplicate = False
        i = 0
        while True :
            if i == len(self._runs) :
                break
            run = self._runs[i]
            if run[0] <= code < run[1] :
                duplicate = True
                break
            #end if
            if code == run[1] :
                append = True
                break
            #end if
            if code + 1 == run[0] :
                prepend = True
                break
            #end if
            if code < run[0] :
                break
            #end if
            i += 1
        #end while
        if not duplicate :
            if prepend :
                if i > 0 and self._runs[i - 1][1] == code :
                    # merge with previous run
                    self._runs[i - 1 : i + 1] = [(self._runs[i - 1][0], self._runs[i][1])]
                else :
                    self._runs[i] = (code, self._runs[i][1])
                #end if
            elif append :
                if i + 1 < len(self._runs) and self._runs[i + 1][0] == code + 1 :
                    # merge with following run
                    self._runs[i : i + 2] = [(self._runs[i][0], self._runs[i + 1][1])]
                else :
                    self._runs[i] = (self._runs[i][0], code + 1)
                #end if
            else :
                if len(self._runs) != 0 and code < self._runs[0][0] :
                    # new run at start
                    self._runs[0 : 0] = [(code, code + 1)]
                else :
                    # new run before position i
                    self._runs[i : i] = [(code, code + 1)]
                #end if
            #end if
        #end if
    #end add

    def remove(self, code) :
        "removes the specified code, if it is there."
        i = 0
        while True :
            if i == len(self._runs) :
                i = None
                break
            #end if
            if self._runs[i][0] <= code < self._runs[i][1] :
                break
            i += 1
        #end while
        if i != None :
            run = self._runs[i]
            run2 = None
            if code == run[0] :
                run = (run[0] + 1, run[1])
                if run[0] == run[1] :
                    run = None
                #end if
            elif code + 1 == run[1] :
                run = (run[0], run[1] - 1)
                if run[0] == run[1] :
                    run = None
                #end if
            else :
                # split into two runs
                run2 = (run[0], code)
                run = (code + 1, run[1])
            #end if
            if run == None :
                # run disappears
                self._runs[i : i + 1] = []
            elif run2 != None :
                # split into two runs
                self._runs[i : i + 1] = [run2, run]
            else :
                self._runs[i] = run
            #end if
        #end if
    #end remove

    def runs(self) :
        "yields a succession of pairs (lo, end), one for each contiguous run of codes," \
        " in increasing code order."
        for run in self._runs :
            yield run
        #end for
    #end runs

#end CodeRuns

#+
# Mainline
#-

if len(sys.argv) != 2 :
    raise RuntimeError("need one arg, the Fontconfig pattern string")
#end if
patternstr = sys.argv[1]

lib = freetype.Library()
if patternstr.find("/") >= 0 or any(patternstr.endswith(suffix) for suffix in (".otf", ".ttf")) :
    # interpret as filename
    face = lib.new_face(patternstr)
else :
    face = lib.find_face(patternstr)
#end if
sys.stdout.write("font family %s style %s filename %s\n" % (face.family_name, face.style_name, face.filename))
sys.stdout.write("charmaps[%d] = " % len(face.charmaps))
for i, charmap in enumerate(face.charmaps) :
    if i != 0 :
        sys.stdout.write(", ")
    #end if
    sys.stdout.write("%d:(encoding = %s, platform_id = %d, encoding_id = %d)" % (i, repr(charmap["encoding"]), charmap["platform_id"], charmap["encoding_id"]))
#end for
sys.stdout.write("\n")
for block in code_blocks :
    block_len = block.end - block.lo
    count = len(list(filter(lambda g : g != 0, (face.get_char_index(c) for c in range(block.lo, block.end)))))
    if count != 0 :
        sys.stdout.write("%%%ds: %%d/%%d\n" % max_block_name_len % (block.name, count, block_len))
    #end if
#end for

char_runs = CodeRuns()
unmapped_glyph_runs = CodeRuns((1, face.num_glyphs)) # always ignore glyph 0
for char_code, glyph_code in face.char_glyphs() :
    char_runs.add(char_code)
    unmapped_glyph_runs.remove(glyph_code)
#end for
sys.stdout.write("Code runs: ")
first_run = True
for run in char_runs.runs() :
    if first_run :
        first_run = False
    else :
        sys.stdout.write(", ")
    #end if
    if run[1] - run[0] == 1 :
        sys.stdout.write("U+%X" % run[0])
    else :
        sys.stdout.write("U+%X..U+%X" % (run[0], run[1] - 1))
    #end if
#end for
if first_run :
    sys.stdout.write("(NONE!)")
#end if
sys.stdout.write("\n")
sys.stdout.write("Unmapped glyphs: ")
first_run = True
for run in unmapped_glyph_runs.runs() :
    if first_run :
        first_run = False
    else :
        sys.stdout.write(", ")
    #end if
    if run[1] - run[0] == 1 :
        sys.stdout.write("%#x" % run[0])
    else :
        sys.stdout.write("%#x..%#x" % (run[0], run[1] - 1))
    #end if
#end for
if first_run :
    sys.stdout.write("(NONE!)")
#end if
sys.stdout.write("\n")
