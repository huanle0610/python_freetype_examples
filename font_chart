#!/usr/bin/python3
#+
# Example use of python_freetype: print a chart of all glyphs,
# and corresponding character codes, encoded by a specified font.
# Invoke this script as follows:
#
#     font_chart <fontspec> <outfile>
#
# where <fontspec> is the Fontconfig pattern string identifying the
# font to use, and <outfile> is the name to give to the output PNG
# file containing the generated chart.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import math
from itertools import \
    filterfalse
import cairo
import freetype
FT = freetype.FT

from code_blocks import \
    code_blocks

if len(sys.argv) != 3 :
    raise RuntimeError("need two args, the Fontconfig pattern string and the output filename")
#end if
patternstr, outfilename = sys.argv[1:]
textsize = 48 # maybe make this user-specifiable later
text_resolution = 90
nr_cols = 32
label_font_name = "serif" # something acceptable to toy font face API only for now
title_size = textsize
label_large_size = textsize * 0.7
label_small_size = 12

lib = freetype.Library()
show_face = lib.find_face(patternstr)
sys.stderr.write("show font family %s style %s filename %s\n" % (show_face.family_name, show_face.style_name, show_face.filename)) # debug
show_face.set_char_size(size = textsize, resolution = text_resolution)
max_show_ascender = show_face.size["metrics"]["ascender"]
max_show_descender = - show_face.size["metrics"]["descender"]
max_show_advance = show_face.size["metrics"]["max_advance"]
pix = cairo.ImageSurface(cairo.FORMAT_A8, 32, 32) # dummy just for getting font metrics
g = cairo.Context(pix)
g.select_font_face(label_font_name)
g.set_font_size(title_size)
max_title_ascender, max_title_descender, _, _, _ = g.font_extents()
g.set_font_size(label_large_size)
max_label_large_ascender, max_label_large_descender, _, _, _ = g.font_extents()
g.set_font_size(label_small_size)
max_label_small_ascender, max_label_small_descender, _, _, _ = g.font_extents()
# sys.stderr.write("show ascender = %.3f, descender = %.3f, height = %.3f, max_advance = %.3f\n" % (max_show_ascender, max_show_descender, show_face.size["metrics"]["height"], max_show_advance)) # debug

nr_blocks = 0
nr_rows = 0
show_blocks = []
for block in code_blocks :
    show_rows = set \
      (
        math.floor(c / nr_cols)
        for c in filterfalse
          (
            lambda c : show_face.get_char_index(c) == 0, range(block.lo, block.hi + 1)
          )
      )
    if len(show_rows) != 0 :
        nr_blocks += 1
        show_block = \
            {
                "name" : block.name,
                "rows" : sorted(show_rows),
                "lo" : block.lo,
                "hi" : block.hi,
            }
        nr_rows += len(show_rows)
        show_blocks.append(show_block)
    #end if
#end for

pix = cairo.ImageSurface \
  (
    cairo.FORMAT_RGB24,
    round(nr_cols * max_show_advance), # width
    round
      (
            max_title_ascender + max_title_descender
        +
            nr_blocks * (max_label_large_ascender + max_label_large_descender)
        +
            nr_rows * (max_show_ascender + max_show_descender + max_label_small_ascender + max_label_small_descender)
      ), # height
  )
sys.stderr.write("creating image w×h = %d×%d\n" % (pix.get_width(), pix.get_height())) # debug
g = cairo.Context(pix)
g.set_source_rgba(1, 1, 1)
g.set_operator(cairo.OPERATOR_SOURCE)
g.paint()
g.set_source_rgb(0, 0, 0)
g.select_font_face(label_font_name)
g.set_font_size(title_size)
show_name = "%s %s" % (show_face.family_name, show_face.style_name)
g.move_to \
  (
    (pix.get_width() - g.text_extents(show_name)[2]) / 2, # horizontally centred
    max_title_ascender
  )
g.show_text(show_name)
y = max_title_ascender + max_title_descender
for block in show_blocks :
    y += max_label_large_ascender
    g.move_to \
      (
        (pix.get_width() - g.text_extents(block["name"])[2]) / 2, # horizontally centred
        y
      )
    g.set_font_size(label_large_size)
    g.show_text(block["name"])
    y += max_label_large_descender
    g.set_font_size(label_small_size)
    for row in block["rows"] :
        y += max_show_ascender
        x = 0
        for code in range(row * nr_cols, (row + 1) * nr_cols) :
            if code >= block["lo"] and code <= block["hi"] : # row might span two blocks
                glyph_code = show_face.get_char_index(code)
            else :
                glyph_code = 0
            #end if
            if glyph_code != 0 :
                show_face.load_glyph(glyph_code, FT.LOAD_DEFAULT)
                if show_face.glyph.metrics["height"] != 0 : # will be 0 for empty glyph (e.g. space character)
                    show_face.glyph.render_glyph(FT.RENDER_MODE_NORMAL)
                    img = show_face.glyph.bitmap.make_image_surface()
                    g.mask_surface \
                      (
                        img,
                        x + (max_show_advance - img.get_width()) / 2,
                        y - show_face.glyph.metrics["horiBearingY"]
                      )
                #end if
                label = "U+%04X" % code
                g.move_to \
                  (
                    x + (max_show_advance - g.text_extents(label)[2]) / 2,
                    y + max_show_descender + max_label_small_ascender
                  )
                g.show_text(label)
            #end if
            x += max_show_advance
        #end for
        y += max_show_descender + max_label_small_ascender + max_label_small_descender
    #end for
#end for
pix.flush()
sys.stderr.write("saving to %s..." % outfilename)
sys.stderr.flush()
pix.write_to_png(outfilename)
sys.stderr.write("done.\n")
